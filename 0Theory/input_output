printf()   -> "print statment"

scanf()    -> "user input"

"%d" -> print int

//user input
1. int ->     scanf("%d", &name)
2. float ->   scanf()


1. %d - Integers: Use %d to print or scan integers

int num = 10;
printf("%d\n", num); // Output: 10
scanf("%d", &num);   // Input: (user input)

2.  (%f) - Floating-point Numbers: Use %f for float and %lf for double. For example:

float f_num = 3.14;
printf("%f\n", f_num); // Output: 3.140000
scanf("%f", &f_num);   // Input: (user input)


3. (%lld) - Large Numbers: Use %lli or %lld for long long. For example:

long long large_num = 2143948230214;
printf("%lld\n", large_num); // Output: 2143948230214
scanf("%lld", &large_num);   // Input: (user input)


4. (%c) - Characters: Use %c to print or scan characters

char ch = 'A';
printf("%c\n", ch); // Output: A
scanf("%c", &ch);   // Input: (user input)

5. (%s) - Strings: Use %s to print or scan strings (arrays of characters). For example:

char name[20] = "John";
printf("%s\n", name); // Output: John
scanf("%s", name);    // Input: (user input)


6. (%p) - Pointers: Use %p to print memory addresses stored in pointers. For example:

int *ptr = NULL;
printf("%p\n", (void*)ptr); // Output: 0x0 (may vary)



//-----------------***************------------------- 

Width: Specifies the minimum number of characters to be printed.

int num = 42;
printf("%10d\n", num); // Output:        42


float pi = 3.14159;
printf("%.2f\n", pi); // Output: 3.14






//-----------------***************------------------- 
Flags: Modify the output format, such as left or right alignment, padding with zeros, and showing the sign. 

int num = 42;
printf("%+d\n", num);  // Output: +42
printf("%-5d\n", num); // Output: 42   
printf("%05d\n", num); // Output: 00042